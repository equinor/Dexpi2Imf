@prefix rml: <http://semweb.mmlab.be/ns/rml#> .
@prefix rr: <http://www.w3.org/ns/r2rml#> .
@prefix ql: <http://semweb.mmlab.be/ns/ql#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix : <http://example.org/rules/> .
@prefix schema: <http://schema.org/> .
@prefix commonlib: <https://commonlib.equinor.com/Library/> .
@prefix dexpi: <https://rdf.equinor.com/dexpi#> .
@prefix asset: <https://assetid.equinor.com/plantx#> .
@prefix dbo: <http://dbpedia.org/ontology/> .
@prefix imf: <http://ns.imfid.org/imf#> .


:PipingNetworkSegmentFromNozzleTerminalMap a rr:TriplesMap;
  rml:logicalSource [
    rml:source "pandid.xml";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//PipingNetworkSegment"
  ];
  rr:subjectMap [
    rr:template "https://assetid.equinor.com/plantx#{Connection/@FromID[contains(., 'Nozzle')]}"; 
    rr:termType rr:IRI;
    rr:class imf:Terminal;
  ].

:PipingNetworkSegmentFromNotNozzleTerminalMap a rr:TriplesMap;
  rml:logicalSource [
    rml:source "pandid.xml";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//PipingNetworkSegment"
  ];
  rr:subjectMap [
    rr:template """https://assetid.equinor.com/plantx#{
                    if(Connection/@FromID[not(contains(., 'Nozzle'))]) then
                        concat(@ID, '_', Connection/@FromID)
                    else()
                    }"""; 
    rr:termType rr:IRI;
    rr:class imf:Terminal;
  ].
 
# :PipingNetworkSegmentMap rr:predicateObjectMap [
#   rr:predicate imf:hasTerminal;
#   rr:objectMap [ 
#     rr:template "https://assetid.equinor.com/plantx#{Connection/@FromID}";
#     rr:termType rr:IRI
#   ];
#   rr:predicate imf:hasTerminal;
#   rr:objectMap [ 
#     rr:template "https://assetid.equinor.com/plantx#{Connection/@ToID}";
#     rr:termType rr:IRI
#   ]
# ] .
