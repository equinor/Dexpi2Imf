@prefix rml: <http://semweb.mmlab.be/ns/rml#> .
@prefix rr: <http://www.w3.org/ns/r2rml#> .
@prefix ql: <http://semweb.mmlab.be/ns/ql#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix : <http://example.org/rules/> .
@prefix schema: <http://schema.org/> .
@prefix dexpi: <https://rdf.equinor.com/dexpi#> .
@prefix asset: <https://assetid.equinor.com/plantx#> .
@prefix imf: <http://ns.imfid.org/imf#> .

:PipingComponentInputTerminal a rr:TriplesMap;
  rml:logicalSource [
    rml:source "pandid.xml";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//PipingNetworkSegment/PipingComponent/ConnectionPoints[position() > 1]"
  ];
  rr:subjectMap [
    rr:template "https://assetid.equinor.com/plantx#{concat(@ID, position())}";  
    rr:termType rr:IRI
  ];
  # This could use the FLowIn, FlowOut and position() to calculate InputTerminal and OutputTerminal 
  # but we do not have a use case that requires this.
  rr:predicateObjectMap [
    rr:predicate rdf:type;
    rr:objectMap [
      rr:constant imf:Terminal;
      rr:termType rr:IRI
    ]
  ];
                              
  # If there is no preceding-sibling, then it is the first component in the piping network segment.
  # The first component is connected to the object that the piping network segment starts from.
  rr:predicateObjectMap [
    rr:predicate imf:hasConnector;
    rr:objectMap [
      rr:template """https://assetid.equinor.com/plantx#{
      if(../preceding-sibling::PipingComponent[1]/@ID) then 
        concat(../preceding-sibling::PipingComponent[1]/@ID, '_connector') 
      else if(../../Connection/@FromID) then
        concat(../../Connection/@FromID, '_',  ../../Connection/@FromNode, '_connector')
      else()
        }""";
      rr:termType rr:IRI; 
    ]
  ] ;
    rr:predicateObjectMap [
      rr:predicate rdfs:label;
      rr:objectMap [
        rr:constant "input";
        rr:datatype xsd:string
      ]
  ] .

:PipingComponentOutputTerminal a rr:TriplesMap;
  rml:logicalSource [
    rml:source "pandid.xml";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//PipingComponent"
  ] ;
  rr:subjectMap [
    rr:template "https://assetid.equinor.com/plantx#{concat(@ID, '_output')}";  
    rr:termType rr:IRI;
    rr:class imf:OutputTerminal
  ] ;
    # If there is no following sibling, then it is the last component in the piping network segment. 
    # The last component is connected to the object that the piping network segment goes to.
    rr:predicateObjectMap [
    rr:predicate imf:hasConnector;
    rr:objectMap [
      rr:template """https://assetid.equinor.com/plantx#{
      if(following-sibling::PipingComponent[1]/@ID or following-sibling::PropertyBreak/@ID) then 
        concat(@ID, '_connector') 
      else if(../Connection/@ToID) then
        concat(../Connection/@ToID, '_', ../Connection/@ToNode, '_connector')
      else()
        }""";
      rr:termType rr:IRI; 
    ]
  ] ;
    rr:predicateObjectMap [
    rr:predicate rdfs:label;
    rr:objectMap [
        rr:constant "output";
        rr:datatype xsd:string
    ]
  ] .